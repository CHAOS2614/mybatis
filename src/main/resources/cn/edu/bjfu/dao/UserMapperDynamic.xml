<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.bjfu.dao.UserMapperDynamic">

    <select id="getUsersByIf" resultType="cn.edu.bjfu.domain.User">
        select * from user
        <!-- 存在问题，当地一个if（id）为null时会出错 -->
        <!-- where使用where标签代替（或者where后面加1=1，之后所有条件前都加and
                where标签会去掉多余的and或者or
                但是只会去掉第一个，如果and写在每个条件之后，则最后一个条件为空的话依然报错，最后多个and-->
        <where>
            <!-- test:判断表达式（OGNL）
                从参数中取值进行判断
                遇见特殊符号应该去写转义字符-->
            <if test="id!=null">
                id=#{id}
            </if>
            <if test="username!=null and username!=&quot;&quot;">
                and username like #{username}
            </if>
            <if test="sex!=null and sex!=&quot;&quot;">
                sex like #{sex} and
            </if>
            <if test="address!=null and address!=&quot;&quot;">
                and address like #{address}
            </if>
        </where>
    </select>

    <select id="getUsersTrim" resultType="cn.edu.bjfu.domain.User">
        select * from user
        <!-- where 只会去掉第一个，如果and写在每个条件之后，则最后一个条件为空的话依然报错，最后多个and
             使用trim标签:标签中是整个字符串拼串之后的结果
                prefix="":给整个字符串加一个前缀
                prefixOverrides="":前缀覆盖，去掉整个字符串前面多余的字符
                suffix="":给整个字符串加一个后缀
                suffixOverrides"":后缀覆盖，去掉整个字符串后面多余的字符-->
        <trim prefix="where" suffixOverrides="and">
            <if test="id!=null">
                id=#{id} and
            </if>
            <if test="username!=null and username!=&quot;&quot;">
                username like #{username} and
            </if>
            <if test="sex!=null and sex!=&quot;&quot;">
                sex like #{sex} and
            </if>
            <if test="address!=null and address!=&quot;&quot;">
                address like #{address}
            </if>
        </trim>
    </select>

    <select id="getUserByConditionChoose" resultType="cn.edu.bjfu.domain.User">
        select * from user
        <where>
            <choose>
                <when test="id!=null">
                    id=#{id}
                </when>
                <when test="username!=null and username!=&quot;&quot;">
                    username like #{username}
                </when>
                <when test="sex!=null and sex!=&quot;&quot;">
                    sex like #{sex}
                </when>
                <when test="address!=null and address!=&quot;&quot;">
                    address like #{address}
                </when>
                <otherwise>
                    address like "%北京%"
                </otherwise>

            </choose>
        </where>
    </select>

    <update id="updateUser">
        update user
        <!-- 使用if标签只更新带参数的
        -->
        <set>
            <if test="username!=null">
                username = #{username},
            </if>
            <if test="birthday!=null">
                birthday = #{birthday},
            </if>
            <if test="sex!=null">
                sex = #{sex},
            </if>
            <if test="address!=null">
                address = #{address}
            </if>
        </set>
        where id = #{id}
    </update>

    <select id="getUsersByConditionForeach" resultType="cn.edu.bjfu.domain.User" parameterType="list">
        select * from user
        <!-- collection:指定要遍历的集合
                List类型的参数会特殊处理封装在map中，map的key就叫list
             item:将当前遍历出的元素赋值给指定的变量
             separator:每个元素之间的分隔符
             open:遍历出所有结果拼接一个开始的字符
             close:遍历出所有结果拼接一个结束的字符
             index:遍历list的时候index就是索引，item就是当前值
                   遍历map的时候index表示key，item就是value-->
        <foreach collection="list" item="item_id" separator="," open="where id in(" close=")">
            #{item_id}
        </foreach>
    </select>

    <insert id="addUsers" >
        insert into user(username,birthday,sex,address,d_id)
        values
        <foreach collection="users" separator="," item="user">
            (#{user.username},#{user.birthday},#{user.sex},#{user.address},#{user.department.id})
        </foreach>
    </insert>

</mapper>